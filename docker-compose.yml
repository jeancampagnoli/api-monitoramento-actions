version: '3.8'

services:
  # API Flask
  api:
    build: ./api
    ports:
      - "8185:8085"
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_USER=api_user
      - MYSQL_PASSWORD=api_password
      - MYSQL_DATABASE=api_db
      - FLASK_ENV=production
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - api_network
      - monitoramento
      - security_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    dns:
      - 8.8.8.8
      - 1.1.1.1

  # MySQL Database
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: api_db
      MYSQL_USER: api_user
      MYSQL_PASSWORD: api_password
    ports:
      - "3406:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - api_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Nginx as proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "8288:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    networks:
      - api_network
    restart: unless-stopped

  # Monitoring services
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8180:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - monitoramento

  prometheus:
    image: prom/prometheus
    ports:
      - "9190:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - monitoramento

  grafana:
    image: grafana/grafana
    ports:
      - "3101:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - monitoramento
    dns:
      - 8.8.8.8
      - 1.1.1.1
    dns_search:
      - .

  node-exporter:
    image: prom/node-exporter
    ports:
      - "9200:9100"
    networks:
      - monitoramento

  # Security Services
  sonarqube:
    image: sonarqube:lts-community
    ports:
      - "9101:9000"
      - "9192:9092"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - security_network
    restart: unless-stopped
    depends_on:
      - sonarqube-db

  sonarqube-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - sonarqube_db_data:/var/lib/postgresql/data
    networks:
      - security_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar -d sonar"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mysql_data:
  prometheus_data:
  grafana-storage:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_db_data:

networks:
  api_network:
    driver: bridge
  monitoramento:
    driver: bridge
  security_network:
    driver: bridge
